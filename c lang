/** 1*/
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int* result = (int*)malloc(2 * sizeof(int));
    *returnSize = 2;
    
    for (int i = 0; i < numsSize; i++) {
        for (int j = i + 1; j < numsSize; j++) {
            if (nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                return result;
            }
        }
    }
    
    result[0] = 0;
    result[1] = 1;
    return result;
}

bool isPalindrome(int x) {
    double rev=0, rem, orignal=x;
    
    
        while(x>0)
        {
            rem = x % 10;
            rev = rev * 10 + rem;
            x/=10;
        }

        if(rev == orignal)
            return true;
        
         else
       return false;
    
}

int romanToInt(char* s) {
    int i=0,ans=0;
    while(s[i]!= '\0')

    {   if(s[i] == 'I' && s[i+1] == 'V'){
           ans = ans +  4; i++;}
        else if(s[i] == 'I' && s[i+1] == 'X'){
           ans = ans +  9; i++;}
        else if(s[i] == 'X' && s[i+1] == 'L'){
           ans = ans +  40; i++;}
        else if(s[i] == 'X' && s[i+1] == 'C'){
           ans = ans +  90; i++; }
        else if(s[i] == 'C' && s[i+1] == 'D'){
           ans = ans +  400; i++;}
        else if(s[i] == 'C' && s[i+1] == 'M'){
           ans = ans +  900; i++;}
        else if(s[i] == 'I')
           ans = ans +  1; 
        else if(s[i] == 'V')
           ans = ans + 5; 
        else if(s[i] == 'X')
           ans = ans +  10;
        else if(s[i] == 'L')
           ans = ans +  50;
        else if(s[i] == 'C')
           ans = ans +  100;
        else if(s[i] == 'D')
           ans = ans +  500;
        else if(s[i] == 'M')
           ans = ans +  1000;  

       i++;      
    }
    return ans;
    
}

char* longestCommonPrefix(char** strs, int strsSize) {
    if (strsSize == 0) return "";
    
    // Sort based on string length
    for (int i = 0; i < strsSize - 1; i++) {
        for (int j = i + 1; j < strsSize; j++) {
            if (strlen(strs[i]) > strlen(strs[j])) {
                char* temp = strs[i];
                strs[i] = strs[j];
                strs[j] = temp;
            }
        }
    }
    
    char* prefix = (char*)malloc(strlen(strs[0]) + 1);
    int len = 0;
    
    for (int i = 0; i < strlen(strs[0]); i++) {
        for (int j = 1; j < strsSize; j++) {
            if (strs[j][i] != strs[0][i]) {
                prefix[len] = '\0';
                return prefix;
            }
        }
        prefix[len++] = strs[0][i];
    }
    
    prefix[len] = '\0';
    return prefix;
    
}

bool isValid(char* s) {
    int len =strlen(s);
    char stack[len];
    int top = -1;
    for(int i=0;i<len;i++){
        if(s[i]=='(' || s[i] == '{' || s[i] == '[' ){
            stack[++top] = s[i];
        }else{
            if(top == -1 ||( s[i]==')'&&stack[top] != '(')||(s[i]=='}'&&stack[top] != '{')||(s[i]==']'&&stack[top]!='[')){
                return false;
            } 
            top--;
        } 
    }  
    return top == -1; 
}

struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)
{
    struct ListNode head;
    struct ListNode *h = &head;
    
    if (l1 == NULL && l2 == NULL)
        return NULL;
    
    while (l1 && l2) {
        if (l1->val < l2->val) {
            h->next = l1;
            l1 = l1->next;
            h = h->next;
        } else {
            h->next = l2;
            l2 = l2->next;
            h = h->next;
        }
    }

    if (l1) {
        h->next = l1;
    }
    if (l2) {
        h->next = l2;
    }
  
    return head.next;
}

int removeDuplicates(int* nums, int numsSize) {
     if (numsSize == 0)
        return 0;
    int index = 1;
    for (int i = 1; i < numsSize; ++i) {
        if (nums[i] != nums[i - 1]) {
            nums[index] = nums[i];
            ++index;
        }
    }
    return index;
    
}

int removeElement(int* nums, int numsSize, int val) {
      if(numsSize==0){
        return 0;
    }
    int j=0;
    for(int i=0;i<numsSize;i++){
        if(nums[i]!=val){
            nums[j++]=nums[i];
        }
    }
    return j;
    
}

int strStr(char* haystack, char* needle) {
    if (strlen(needle) > strlen(haystack))
        return -1;

    for (int i = 0; i < strlen(haystack); i++) {
        if (!strncmp(haystack + i, needle, strlen(needle))) 
            return i;
    }

    return -1;
    
}

int searchInsert(int* nums, int numsSize, int target) {
    int left = 0, right = numsSize, mid;
    
    while(left < right) {
        mid = left + (right - left) / 2;
        
        if (nums[mid] >= target) 
            right = mid;            
        else
            left = mid + 1;
    }
    return left;
    
}

int lengthOfLastWord(char* s) {
    
     int len=1;
    for(int i=1;s[i];i++){
        if(s[i]==' ')continue;
        if(s[i-1]==' ')len=0;
        len++;
    }
    return len;
}

int* plusOne(int* digits, int digitsSize, int* returnSize) {
    int *res = malloc(sizeof(int) * 100);
    int cf = 1;
    
    for (int i = digitsSize - 1; i >= 0; i--) {
        if (digits[i] + cf > 9) {
            digits[i] = (digits[i] + cf) % 10;
        } else {
            digits[i] = digits[i] + cf;
            cf = 0;
            break;
        }
    }
    
    if (cf)
        res[0] = 1;
    
    for (int i = cf, j = 0; j < digitsSize; i++, j++)
        res[i] = digits[j];
    
    *returnSize = digitsSize + cf;
    return res;
    
}

char* addBinary(char* a, char* b) {
    int len_a = strlen(a);
    int len_b = strlen(b);
    int len_ans = ( len_a > len_b ? len_a : len_b ) + 1;

    char* ans = (char*)malloc(len_ans + 1);
    ans[len_ans] = '\0';

    int sum = 0;
    while ( len_a > 0 || len_b > 0 || sum > 0 ) {
        if ( len_a > 0 ) 
            sum += a[--len_a] - '0';
            
        if ( len_b > 0 )
            sum += b[--len_b] - '0';     

        ans[--len_ans] = sum % 2 + '0';
        sum /= 2;
    }
    return ans + len_ans;
}

int mySqrt(int x) {
     if(x<2) return x;
    int max=x,min=1;

    while(min<=max){
        int mid= min+((max-min)/2);
        if(mid == x/mid) return mid;
        else if(mid < x/mid) min=mid+1;
        else max=mid-1;
    }

    return max;
    
}

int climbStairs(int n) {
     if (n <= 1) {
        return 1; // Base cases
    }

    int dp[3] = {1, 1, 0}; // Rolling array to store dp[i%3], dp[(i-1)%3], and dp[(i-2)%3]

    for (int i = 2; i <= n; i++) {
        dp[i % 3] = dp[(i - 1) % 3] + dp[(i - 2) % 3];
    }

    return dp[n % 3];
    
}

truct ListNode* deleteDuplicates(struct ListNode* head) {
     struct ListNode* new_list = head;
    struct ListNode* temp = head;
    while (temp != NULL && temp->next != NULL) {
        if (temp->val == temp->next->val) {
            temp->next = temp->next->next;
        } else {
            temp = temp->next;
        }
    }
    return new_list;
    
}

void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n)
{
    int i, i1, i2;

    i1 = m - 1;
    i2 = n - 1;
    i = nums1Size - 1;
    
    while (i1 >= 0 && i2 >= 0) {
        if (nums1[i1] > nums2[i2]) {
            nums1[i--] = nums1[i1--];
        } else {
            nums1[i--] = nums2[i2--];
        }
    }
    
    while (i2 >= 0) {
        nums1[i--] = nums2[i2--];
    }
}


nt* inorderTraversal(struct TreeNode* root, int* returnSize) {
    int * res = (int *)malloc(sizeof(int)*100);
    *returnSize = 0 ;
    void traversal(struct TreeNode* root , int *res , int * returnSize)
    {
        if(root != NULL)
        {
            traversal(root->left , res , returnSize);
            res[*returnSize] = root->val ; 
            (*returnSize) ++ ;
            traversal(root->right , res , returnSize);
        }
    
    }
    traversal(root , res , returnSize);
    return res;
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isSameTree(struct TreeNode* p, struct TreeNode* q) {
     if(p==NULL && q==NULL)
            return true;
        if(p==NULL || q==NULL)
            return false;
        if(p->val!=q->val)
            return false;
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
    
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isSymmetric(struct TreeNode* root) {
    if (!root)
        return true;
    struct TreeNode *stack[1001] = {NULL};
    int idx = 0;
    stack[idx++] = root->left;
    stack[idx++] = root->right;
    while(idx) {
        struct TreeNode *right = stack[--idx];
        struct TreeNode *left = stack[--idx];
        if (!left && !right)
            continue;
        if (!left || !right || left->val != right->val)
            return false;
        stack[idx++] = left->left;
        stack[idx++] = right->right;
        stack[idx++] = left->right;
        stack[idx++] = right->left;        
    }
    return true;
    
}

int max(int a, int b)
{
    return (a >= b) ? a : b;
}
int maxDepth(struct TreeNode* root){
    if(root!=NULL){
        return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
    else{
        return 0;
    }
} 

struct TreeNode* sortedArrayToBST(int* nums, int numsSize) {

    if (numsSize == 0)
    {
        return NULL;
    }
    int midIndex = numsSize >> 1;
    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    node->val = nums[midIndex];
    node->left = sortedArrayToBST(&nums[0], midIndex);
    node->right = sortedArrayToBST(&nums[midIndex + 1], numsSize - midIndex - 1);
    return node;
    
}

int maxdepth(struct TreeNode* root, int depth){
    if(depth<0 || root==NULL) return depth;  //return depth if it reaches the end or it's already not balanced
    int left = maxdepth(root->left, depth+1);
    int right = maxdepth(root->right, depth+1);
    depth = (left>right)? left:right; // choose max depth
    if(abs(left-right)>1) depth*=(-1); // not balanced, convert to negative value
    return depth;
}

bool isBalanced(struct TreeNode* root) {
    return maxdepth(root,0) >= 0;
    
}

int minDepth(struct TreeNode* root) {
      if(root==NULL)  return 0;
    if(root->left==NULL)    return 1+minDepth(root->right);
    if(root->right==NULL)   return 1+minDepth(root->left);

    int leftheight = minDepth(root->left)+1;
    int rightheight = minDepth(root->right)+1;

    return (leftheight<rightheight)?leftheight:rightheight;
    
    
}

bool hasPathSum(struct TreeNode* root, int targetSum) {
     if (root == NULL) return false;
    
    // root node is a leaf
    if(root->left == NULL && root->right== NULL){
        if(root->val == targetSum){
            return true;
        }else{
            return false;
        }
    }
    return ((hasPathSum(root->left,targetSum - root->val))||
            (hasPathSum(root->right,targetSum - root->val)));
    
}

int** generate(int numRows, int* returnSize, int** returnColumnSizes) {
     *returnSize = numRows;
    int **output = calloc(1, sizeof(int *[numRows]));
    *returnColumnSizes = calloc(1, sizeof(int [numRows]));
    
    //Allocate memory for the whole triangle
    for (int i=0; i<numRows; i++) {
        (*returnColumnSizes)[i] = i + 1;
        output[i] = calloc(1, sizeof(int [i + 1]));
    }
    
    //the first row will always be 1
    output[0][0] = 1;
    
    for (int i=1; i<numRows; i++) {
        output[i][0] = 1;
        for (int j=1; j<i; j++) {
            output[i][j] = output[i-1][j-1] + output[i-1][j];
        }
        output[i][i] = 1;
    }
    return output;
    
}

int* getRow(int rowIndex, int* returnSize) {

        int* ret = (int*)malloc(sizeof(int)*(rowIndex+1));
        ret[0]=1; // base case on top
        for (int i=1; i<rowIndex+1;i++){
            ret[i]=1; //sets last index of current row to 1
            int o=1;
            for (int j=1; j<i;j++){ 
                //sum up "prev row" index j-1 and j and put in j
                //-> index j original value needs to be saved
                ret[j] = o + ret[j];
                o=ret[j]-o;
            }
        }

        *returnSize=rowIndex+1;
        return ret;


    
}

int maxProfit(int* prices, int pricesSize) {
    
    if (pricesSize == 0) {
        return 0; // If no prices, no profit.
    }

    int minPrice = prices[0]; // Start with the first price as the minimum
    int maxProfit = 0; // Initially, no profit

    // Iterate through the prices starting from the second day
    for (int i = 1; i < pricesSize; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
        }
        // Calculate the potential profit for the current price
        int profit = prices[i] - minPrice;

        // Update maxProfit if the current profit is higher
        if (profit > maxProfit) {
            maxProfit = profit;
        }

        // Update the minPrice if the current price is lower than the previous minimum
        
    }

    return maxProfit;
}

bool isPalindrome(char* s) {
     char* first = s;
    char* last = s + strlen(s) - 1;

    while (first <= last) {
        if (isalnum(*first) && isalnum(*last)) {
            if (tolower(*first++) != tolower(*last--)) return false;
        }
        else {
            if (!isalnum(*first)) ++first;
            if (!isalnum(*last)) --last;
        }
    }

    return true;
    
}

int singleNumber(int* nums, int numsSize) {
    int uniqNum = 0;
    for (int idx = 0; idx < numsSize; idx++) {
        uniqNum = uniqNum ^ nums[idx];
    } return uniqNum;
    
}

bool hasCycle(struct ListNode *head) {
     if (head == NULL) {
        return false;
    }

    while (head != NULL) {
        if (head->val == 100001) {
            return true;
        }
        head->val = 100001;
        head = head->next;
    }

    return false;
    
}

void preOrder(struct TreeNode* root, int *arr, int *returnSize){
    if(root!=NULL){
        arr[(*returnSize)++] = root->val;
        preOrder(root->left, arr, returnSize);
        preOrder(root->right, arr, returnSize);
    }
}

int* preorderTraversal(struct TreeNode* root, int* returnSize){
    int * arr = malloc(100*sizeof(int));
    *returnSize = 0;
    preOrder(root, arr, returnSize);
    arr = realloc(arr, (*returnSize)*sizeof(int));
    return arr;
}

